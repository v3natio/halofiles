#!/bin/bash

# script that generates a front-end for iwctl

# check if iwd service is running
if [[ "inactive" == $(systemctl is-active iwd.service) ]]; then
  notify-send -a "Network" "󰲝 Attempting to start 'iwd'..."
  $(sudo -A systemctl start iwd.service) || exit 1
fi

# select wifi interface device
if ip link | grep -E -q '^[0-9]+: w.* state UP '; then
  # prioritize devices that are up already
  WIFI_DEVICE_LIST=$(
    ip link |
      grep -E -i '^[0-9]+: w.* state UP ' |
      sed 's/^[0-9]\+: //g' |
      sed 's/:.*//g'
  )
else
  WIFI_DEVICE_DOWN=1
  WIFI_DEVICE_LIST=$(
    ip link |
      grep -E -i '^[0-9]+: w' |
      sed 's/^[0-9]\+: //g' |
      sed 's/:.*//g'
  )
fi

if [ -z "$WIFI_DEVICE_LIST" ]; then
  notify-send -a "Network" "󰛵 No available WiFi devices. Use 'ip link' to check status."
  exit 1
elif echo $WIFI_DEVICE_LIST | grep -q " "; then
  # pipe list of devices to dmenu if there is more than one
  WIFI_DEVICE=$(
    echo "$WIFI_DEVICE_LIST" | dmenu -l 5 -p "Select device:" -l 30
  )
  if [[ -z $WIFI_DEVICE ]]; then
    exit 0
  fi
else
  # skip dmenu if there is only one device
  WIFI_DEVICE="$WIFI_DEVICE_LIST"
fi

# bring up wifi interface if it is down
if [[ $WIFI_DEVICE_DOWN ]]; then
  notify-send -a "Network" "󰅛 Device $WIFI_DEVICE is down. Attempting to bring it up..."
  sudo -A ip link set "$WIFI_DEVICE" up &&
    notify-send -a "Network" "󰱓 $WIFI_DEVICE is up," ||
    notify-send -a "Network" "󰲜 Could not bring $WIFI_DEVICE up."
fi

# display network options in dmenu
NETWORK_OPTION=$(echo -e "Connect\nDisconnect\nForget\nReset" | dmenu -l 5 -p "󰛳 Network:")

case "$NETWORK_OPTION" in
"Connect")
  iwctl station "$WIFI_DEVICE" scan
  sleep .5

  WIFI_NETWORK_LIST=$(
    iwctl station "$WIFI_DEVICE" get-networks |
      awk '{if(NR>4)print}' |
      sed 's/\x1b\[[0-9;]*m\*\?//g'
  )

  if [[ -z $WIFI_NETWORK_LIST ]]; then
    notify-send -a "Network" "󰲜 No networks found."
    exit 1
  fi

  # trim selected network for SSID
  WIFI_NETWORK=$(
    echo "$WIFI_NETWORK_LIST" |
      dmenu -l 5 -p "Select network:" -l 30 |
      sed 's/ *\(psk\|open\|8021x\) \+\*\+//g' |
      sed 's/^ *>\? *//g' |
      sed 's/ *$//g'
  )

  if [[ -z $WIFI_NETWORK ]]; then
    exit 0
  fi

  WIFI_PASSWORD=$(echo "" | dmenu -P -p "Enter password 󰟵 :")
  iwctl --passphrase="$WIFI_PASSWORD" station "$WIFI_DEVICE" connect "$WIFI_NETWORK" &&
    notify-send -a "Network" "󰱓 Connected to $WIFI_NETWORK." ||
    notify-send -a "Network" "󰲜 Could not connect to $WIFI_NETWORK."
  ;;
"Disconnect")
  iwctl station "$WIFI_DEVICE" disconnect &&
    notify-send -a "Network" "󰲜 Disconnected from $WIFI_NETWORK."
  ;;
"Forget")
  WIFI_KNOWN_LIST=$(
    iwctl known-networks list |
      awk 'NR>4' |
      grep '[a-zA-Z0-9]' |
      sed 's/ *\(psk\|open\|8021x\)[ \t]*.*//g' |
      sed 's/ *$//g'
  )

  if [[ -z $WIFI_KNOWN_LIST ]]; then
    notify-send -a "Network" "󰛵 No known networks."
    exit 1
  fi

  WIFI_NETWORK=$(echo "$WIFI_KNOWN_LIST" | dmenu -l 5 -p "Select Wifi 󰛳:" -l 30)

  if [[ -z $WIFI_NETWORK ]]; then
    exit 0
  fi

  iwctl known-networks "$WIFI_NETWORK" forget &&
    notify-send -a "Network" "󰍸 Forgot $WIFI_NETWORK."
  ;;
"Reset")
  sudo -A ip link set "$WIFI_DEVICE" down &&
    sudo -A ip link set "$WIFI_DEVICE" up &&
    notify-send -a "Network" "󰱓 $WIFI_DEVICE has been reset."
  ;;
*)
  exit 1
  ;;
esac

exit 0
