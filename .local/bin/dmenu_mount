#!/bin/bash

# script that generates a front-end for mount

IFS='
'
# function to escape cell-phone name
escape() { echo "$@" | iconv -cf UTF-8 -t ASCII//TRANSLIT | tr -d '[:punct:]' | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed "s/-\+/-/g;s/\(^-\|-\$\)//g"; }

# check for phones.
phones="$(simple-mtpfs -l 2>/dev/null | sed "s/^/󰄜/")"
mountedphones="$(grep "simple-mtpfs" /etc/mtab)"
# if there are phones mounted, remove them from mountables list
[ -n "$mountedphones" ] && phones="$(for phone in $phones; do
  for mounted in $mountedphones; do
    escphone="$(escape "$phone")"
    [[ "$mounted" =~ "$escphone" ]] && break 1
  done && continue 1
  echo "$phone"
done)"

# check for drives.
lsblkoutput="$(lsblk -rpo "uuid,name,type,size,label,mountpoint,fstype")"
# get all LUKS drives
allluks="$(echo "$lsblkoutput" | grep crypto_LUKS)"
# get a list of the LUKS drive UUIDs already decrypted.
decrypted="$(find /dev/disk/by-id/dm-uuid-CRYPT-LUKS2-* | sed "s|.*LUKS2-||;s|-.*||")"
# function to format drives correctly for dmenu:
filter() { sed "s/ /:/g" | awk -F':' '$7==""{printf "%s%s (%s) %s\n",$1,$3,$5,$6}'; }

# only get LUKS drives that are not decrypted
unopenedluks="$(for drive in $allluks; do
  uuid="${drive%% *}"
  uuid="${uuid//-/}" # bashism
  [ -n "$decrypted" ] && for open in $decrypted; do
    [ "$uuid" = "$open" ] && break 1
  done && continue 1
  echo "󰌾 $drive"
done | filter)"

# get all unmounted partitions.
normalparts="$(echo "$lsblkoutput" | grep -v crypto_LUKS | grep 'part\|rom\|crypt' | sed "s/^/󰕓 /" | filter)"

# add all devices to one variable, else exit
alldrives="$(echo "$phones
$unopenedluks
$normalparts" | sed "/^$/d;s/ *$//")"

# quit if a sequential command fails
set -e

test -n "$alldrives"

# feed all found drives to dmenu and get user choice.
chosen="$(echo "$alldrives" | dmenu -l 5 -p "Mount which drive?" -i)"

# prompt user for a mountpoint
getmount() {
  mp="$(find /mnt /media /mount /home -maxdepth 5 -type d 2>/dev/null | dmenu -l 5 -i -p "Mount this drive where?")"
  test -n "$mp"
  if [ ! -d "$mp" ]; then
    mkdiryn=$(printf "No\\nYes" | dmenu -l 5 -i -p "$mp does not exist. Create it?")
    [ "$mkdiryn" = "Yes" ] && (mkdir -p "$mp" || sudo -A mkdir -p "$mp")
  fi
}

attemptmount() {
  sudo -A mount "$chosen" || return 1
  notify-send -a "Mount" "󰕓 $chosen mounted."
  exit
}

case "$chosen" in
󰕓*)
  chosen="${chosen%% *}"
  chosen="${chosen:1}" # bashism
  attemptmount || getmount
  sudo -A mount "$chosen" "$mp" -o uid="$(id -u)",gid="$(id -g)"
  notify-send -a "Mount" "󰕓 $chosen mounted to $mp."
  ;;

󰌾*)
  chosen="${chosen%% *}"
  chosen="${chosen:1}" # bashism
  while true; do
    [ -f "/dev/mapper/usb$num" ] || break
    num="$(printf "%02d" "$((num + 1))")"
  done

  # decrypt in a terminal window
  ${TERMINAL:-st} -n floatterm -g 60x1 -e sudo cryptsetup open "$chosen" "usb$num"
  test -b "/dev/mapper/usb$num"

  attemptmount || getmount
  sudo -A mount "/dev/mapper/usb$num" "$mp" -o uid="$(id -u)",gid="$(id -g)"
  notify-send -a "Mount" "󰌿 $chosen decrypted and mounted to $mp."
  ;;

󰄜*)
  notify-send -a "Mount" "Remember to allow file access on your phone now."
  getmount
  number="${chosen%%:*}"
  number="${chosen:1}" # bashism
  sudo -A simple-mtpfs -o allow_other -o fsname="simple-mtpfs-$(escape "$chosen")" --device "$number" "$mp"
  notify-send -a "Mount" "󱟽 Phone mounted to $mp."
  ;;
esac
