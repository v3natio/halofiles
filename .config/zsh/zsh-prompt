#!/bin/sh

# autoload vcs and colors
autoload -Uz vcs_info
autoload -U colors && colors

# enable for git *only*
zstyle ':vcs_info:*' enable git 

# setup a hook that runs before every prompt
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst

# add a function to check for untracked files in the directory
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked

+vi-git-untracked(){
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
    git status --porcelain | grep '??' &> /dev/null ; then
    # this will show the marker if there are untracked files in repo
    # to show the marker ONLY if there are untracked files in $PWD, use
    # [[ -n $(git ls-files --others --exclude-standard) ]]; then
    hook_com[staged]+='!' # signify new files with a bang
  fi
}

zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git:*' formats "%{$fg[white]%}[%{$fg[red]%}%m%u%c%{$fg[white]%} %{$fg[yellow]%}%b%{$fg[white]%}]-"

# add a function to check for python-poetry env
poetry_env_prompt() {
  if [[ -n "$VIRTUAL_ENV" ]]; then
    local python_version
    python_version=$(python --version 2>/dev/null | awk '{print $2}' | cut -d. -f1,2)
    echo "%{$fg[white]%}[%{$fg[cyan]%} %{$reset_color%}$python_version%{$fg[white]%}]-"
  fi
}

# prompt format
#PS1="\$vcs_info_msg_0_%{$fg[white]%}[%{$fg[yellow]%}%c%{$reset_color%}%{$fg[white]%}]%{$reset_color%}%(?:%B%{$fg_bold[green]%}  %{$reset_color%}:%B%{$fg_bold[red]%}  %{$reset_color%})%{$reset_color%}"
PS1='$(poetry_env_prompt)$vcs_info_msg_0_%{$fg[white]%}[%{$fg[yellow]%}%c%{$reset_color%}%{$fg[white]%}]%{$reset_color%}%(?:%B%{$fg_bold[green]%}  %{$reset_color%}:%B%{$fg_bold[red]%}  %{$reset_color%})%{$reset_color%}'
